import React from 'react';
import './TaskInput.css';

interface TaskInputProps {
  input: string;
  dueDate: string;
  priority: 'low' | 'medium' | 'high';
  allDay: boolean;
  setInput: (value: string) => void;
  setDueDate: (value: string) => void;
  setPriority: (value: 'low' | 'medium' | 'high') => void;
  setAllDay: (value: boolean) => void;
  addTask: () => void;
}

.task-input-container input[type="date"]::placeholder,
.task-input-container input[type="datetime-local"]::placeholder {
    color: #9ca3af !important; /* Match .text-gray-400 */
    opacity: 1;
}

const TaskInput: React.FC<TaskInputProps> = ({
  input,
  dueDate,
  priority,
  allDay,
  setInput,
  setDueDate,
  setPriority,
  setAllDay,
  addTask,
}) => {
    // Helper to format dueDate for display
    const formatDisplayDate = (date: string, allDay: boolean) => {
      if (!date) return '';
      try {
        return allDay
        ? date.split('T')[0]
      : new Date(date).toLocaleString('en-US', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
      });
      } catch {
          return 'Invalid date';
        }
    };

      return (
      <div className="task-input-container">
    {/* Main input row */}
    <div className="flex space-x-2 mb-2">
    <input
    type="text"
    value={input}
      onChange={(e) => setInput(e.target.value)}
      placeholder="Add a task"
      onKeyDown={(e) => e.key === 'Enter' && addTask()}
      className="flex-1 p-2 bg-gray-800 border border-gray-600 rounded"
      aria-label="Task description"
      style={{ color: 'black' }}
    />

    <div className="flex items-center space-x-2">
    <input
    key={allDay ? 'date' : 'datetime-local'} // Force re-render on type change
    type={allDay ? 'date' : 'datetime-local'}
      value={
      dueDate && !isNaN(new Date(dueDate).getTime())
    ? allDay
    ? dueDate.split('T')[0]
    : dueDate.slice(0, 16)
    : ''
    } // Validate and format
    onChange={(e) => {
      console.log('Date input changed:', e.target.value, 'allDay:', allDay); // Debug
    if (allDay) {
    setDueDate(e.target.value ? `${e.target.value}T23:59:59` : '');
    } else {
      setDueDate(e.target.value);
      }
    }}
      className="p-2 bg-gray-800 text-white border border-gray-600 rounded min-w-[180px]"
      aria-label="Task due date"
      placeholder={allDay ? 'Select date' : 'Select date & time'}
      style={{ color: 'white', opacity: 1, '::placeholder': { color: '#9ca3af' } }}
    />
    {dueDate && (
    <span className="text-gray-400 text-sm">
    {formatDisplayDate(dueDate, allDay)}
    </span>
    )}
    </div>

    <select
    value={priority}
      onChange={(e) => setPriority(e.target.value as 'low' | 'medium' | 'high')}
      className="p-2 bg-gray-800 text-white border border-gray-600 rounded"
      aria-label="Task priority"
      style={{ color: 'white' }}
    >
    <option value="low">Low</option>
    <option value="medium">Medium</option>
    <option value="high">High</option>
    </select>

    <button
    type="button"
    onClick={addTask}
      className="px-4 py-2 bg-cyan-500 text-white rounded hover:bg-cyan-600 whitespace-nowrap font-semibold"
      disabled={!input.trim()}
    >
    Add Task
    </button>
    </div>

    {/* Date options row */}
    <div className="flex items-center justify-between">
    <div className="flex items-center">
    {/* All Day checkbox */}
    <label className="flex items-center cursor-pointer text-white">
    <input
    type="checkbox"
    checked={allDay}
      onChange={(e) => {
      const isAllDay = e.target.checked;
      console.log('All day toggled:', isAllDay, 'dueDate:', dueDate); // Debug
    setAllDay(isAllDay);
      if (isAllDay && dueDate) {
      const dateOnly = dueDate.split('T')[0];
    setDueDate(`${dateOnly}T23:59:59`);
    } else if (!isAllDay && dueDate) {
      const dateOnly = dueDate.split('T')[0];
      const now = new Date();
      const time = `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`;
    setDueDate(`${dateOnly}T${time}`);
    }
    }}
      className="w-4 h-4 text-cyan-600 bg-gray-700 border-gray-600 rounded focus:ring-cyan-500"
      />
      <span className="text-white ml-2">All day task</span>
      </label>

    {/* Show current date/time info */}
    {dueDate && (
    <span className="text-gray-400 ml-4 text-sm">
    {allDay ? 'Due end of day' : 'Specific time'}
    </span>
    )}
    </div>

    {/* Quick date buttons with better spacing */}
    <div className="flex space-x-4">
    <button
    type="button"
    onClick={() => {
      const today = new Date();
      const year = today.getFullYear();
      const month = String(today.getMonth() + 1).padStart(2, '0');
      const day = String(today.getDate()).padStart(2, '0');
      const todayEndOfDay = `${year}-${month}-${day}T23:59:59`;
    setDueDate(todayEndOfDay);
    setAllDay(true);
      console.log('Today set:', todayEndOfDay); // Debug
    }}
      className="px-4 py-2 bg-gray-700 text-white rounded hover:bg-gray-600 font-medium"
      >
      Today
      </button>
      <button
      type="button"
      onClick={() => {
      const tomorrow = new Date();
      tomorrow.setDate(tomorrow.getDate() + 1);
      const year = tomorrow.getFullYear();
      const month = String(tomorrow.getMonth() + 1).padStart(2, '0');
      const day = String(tomorrow.getDate()).padStart(2, '0');
      const tomorrowEndOfDay = `${year}-${month}-${day}T23:59:59`;
    setDueDate(tomorrowEndOfDay);
    setAllDay(true);
      console.log('Tomorrow set:', tomorrowEndOfDay); // Debug
    }}
      className="px-4 py-2 bg-gray-700 text-white rounded hover:bg-gray-600 font-medium"
      >
      Tomorrow
      </button>
    {dueDate && (
    <button
    type="button"
    onClick={() => {
    setDueDate('');
    setAllDay(false);
      console.log('Date cleared'); // Debug
    }}
      className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-500 font-medium"
      >
      Clear
      </button>
    )}
    </div>
    </div>
    </div>
    );
    };

export default TaskInput;